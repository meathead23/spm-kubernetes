{"version":3,"sources":["webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/PageHeader.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/EditLink.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/PageTabs.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/LastModifiedDate/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/LastModifiedDate/LastModifiedDate.js","webpack:///./node_modules/gatsby-theme-carbon/src/templates/Default.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/EditLink.module.scss","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/PageTabs.module.scss","webpack:///./node_modules/gatsby-theme-carbon/src/components/LastModifiedDate/last-modified-date.module.scss","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/PageHeader.module.scss","webpack:///./src/pages/build-images/build_images.mdx"],"names":["PageHeader","title","theme","tabs","className","cx","styles","pageHeader","withTabs","length","darkMode","id","text","EditLink","relativePagePath","repositoryProp","repository","useStaticQuery","site","siteMetadata","baseUrl","subDirectory","href","branch","row","link","PageTabs","render","this","props","slug","currentTab","split","filter","Boolean","slice","pageTabs","map","tab","slugifiedTab","slugify","lower","strict","selected","currentTabRegex","RegExp","replace","key","selectedItem","listItem","to","tabsContainer","aria-label","list","React","Component","LastModifiedDate","date","lastModified","Date","toLocaleDateString","day","year","month","Default","pageContext","children","location","Title","frontmatter","titleType","frontmatterTheme","description","keywords","interiorTheme","useMetadata","pathPrefix","pathname","Layout","homepage","pageTitle","pageDescription","pageKeywords","label","Main","padded","NextPrevious","Utils","module","exports","_frontmatter","makeShortcode","name","console","warn","InlineNotification","Tabs","Tab","Row","Column","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-pages-build-images-build-images-mdx-9549dcf048ddc87d55ab.js","sourcesContent":["import PageHeader from './PageHeader';\n\nexport default PageHeader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport styles from './PageHeader.module.scss';\n\nconst PageHeader = ({ title, theme, tabs = [] }) => (\n  <div\n    className={cx(styles.pageHeader, {\n      [styles.withTabs]: tabs.length,\n      [styles.darkMode]: theme === 'dark',\n    })}>\n    <div className=\"bx--grid\">\n      <div className=\"bx--row\">\n        <div className=\"bx--col-lg-12\">\n          <h1 id=\"page-title\" className={styles.text}>\n            {title}\n          </h1>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nPageHeader.propTypes = {\n  /**\n   * Specify the title for the page\n   */\n  title: PropTypes.node,\n};\n\nexport default PageHeader;\n","import EditLink from './EditLink';\n\nexport default EditLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql, useStaticQuery } from 'gatsby';\n\nimport { link, row } from './EditLink.module.scss';\n\nconst EditLink = ({ relativePagePath, repository: repositoryProp }) => {\n  const {\n    site: {\n      siteMetadata: { repository },\n    },\n  } = useStaticQuery(graphql`\n    query REPOSITORY_QUERY {\n      site {\n        siteMetadata {\n          repository {\n            baseUrl\n            subDirectory\n            branch\n          }\n        }\n      }\n    }\n  `);\n\n  const { baseUrl, subDirectory, branch } = repositoryProp || repository;\n\n  const href = `${baseUrl}/edit/${branch}${subDirectory}/src/pages${relativePagePath}`;\n\n  return baseUrl ? (\n    <div className={`bx--row ${row}`}>\n      <div className=\"bx--col\">\n        <a className={link} href={href}>\n          Edit this page on GitHub\n        </a>\n      </div>\n    </div>\n  ) : null;\n};\n\nEditLink.propTypes = {\n  repository: PropTypes.shape({\n    baseUrl: PropTypes.string,\n    subDirectory: PropTypes.string,\n    branch: PropTypes.string,\n  }),\n  relativePagePath: PropTypes.string,\n};\n\nexport default EditLink;\n","import PageTabs from './PageTabs';\n\nexport default PageTabs;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\nimport slugify from 'slugify';\nimport cx from 'classnames';\n\nimport {\n  tabsContainer,\n  list,\n  selectedItem,\n  listItem,\n  link,\n} from './PageTabs.module.scss';\n\nexport default class PageTabs extends React.Component {\n  render() {\n    const { title, tabs, slug } = this.props;\n    const currentTab = slug.split('/').filter(Boolean).slice(-1)[0];\n\n    const pageTabs = tabs.map((tab) => {\n      const slugifiedTab = slugify(tab, { lower: true, strict: true });\n      const selected = slugifiedTab === currentTab;\n      // matches with or without trailing slash: /?\n      // matches with or without hash link: (#.*)?\n      const currentTabRegex = new RegExp(`${currentTab}/?(#.*)?$`);\n      const href = slug.replace(currentTabRegex, slugifiedTab);\n      return (\n        <li key={tab} className={cx({ [selectedItem]: selected }, listItem)}>\n          <Link className={link} to={`${href}`}>\n            {tab}\n          </Link>\n        </li>\n      );\n    });\n\n    return (\n      <div className={tabsContainer}>\n        <div className=\"bx--grid\">\n          <div className=\"bx--row\">\n            <div className=\"bx--col-lg-12 bx--col-no-gutter\">\n              <nav aria-label={title}>\n                <ul className={list}>{pageTabs}</ul>\n              </nav>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nPageTabs.propTypes = {\n  tabs: PropTypes.array,\n  slug: PropTypes.string,\n};\n","import LastModifiedDate from './LastModifiedDate';\n\nexport default LastModifiedDate;\n","import React from 'react';\nimport { Row, Column } from '../Grid';\nimport styles from './last-modified-date.module.scss';\n\nconst LastModifiedDate = ({ date }) => {\n  const options = {\n    day: '2-digit',\n    year: 'numeric',\n    month: 'long',\n  };\n\n  const lastModified = new Date(date);\n\n  return date ? (\n    <Row className={styles.row}>\n      <Column>\n        <div className={styles.text}>\n          Page last updated: {lastModified.toLocaleDateString('en-GB', options)}\n          {/* // https://www-03preprod.ibm.com/support/knowledgecenter/ibm_style/dates-and-times.html */}\n        </div>\n      </Column>\n    </Row>\n  ) : null;\n};\nexport default LastModifiedDate;\n","import React from 'react';\nimport slugify from 'slugify';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport Utils from '../components/Utils';\nimport Layout from '../components/Layout';\nimport PageHeader from '../components/PageHeader';\nimport EditLink from '../components/EditLink';\nimport NextPrevious from '../components/NextPrevious';\nimport PageTabs from '../components/PageTabs';\nimport Main from '../components/Main';\nimport useMetadata from '../util/hooks/useMetadata';\nimport LastModifiedDate from '../components/LastModifiedDate';\n\nconst Default = ({ pageContext, children, location, Title }) => {\n  const { frontmatter = {}, relativePagePath, titleType } = pageContext;\n  const {\n    tabs,\n    title,\n    theme: frontmatterTheme,\n    description,\n    keywords,\n    date,\n  } = frontmatter;\n\n  const { interiorTheme } = useMetadata();\n\n  // get the path prefix if it exists\n  const {\n    site: { pathPrefix },\n  } = useStaticQuery(graphql`\n    query PATH_PREFIX_QUERY {\n      site {\n        pathPrefix\n      }\n    }\n  `);\n\n  // let gatsby handle prefixing\n  const slug = pathPrefix\n    ? location.pathname.replace(pathPrefix, '')\n    : location.pathname;\n\n  const getCurrentTab = () => {\n    if (!tabs) return '';\n    return (\n      slug.split('/').filter(Boolean).slice(-1)[0] ||\n      slugify(tabs[0], { lower: true })\n    );\n  };\n\n  const currentTab = getCurrentTab();\n\n  const theme = frontmatterTheme || interiorTheme;\n\n  return (\n    <Layout\n      tabs={tabs}\n      homepage={false}\n      theme={theme}\n      pageTitle={title}\n      pageDescription={description}\n      pageKeywords={keywords}\n      titleType={titleType}>\n      <PageHeader\n        title={Title ? <Title /> : title}\n        label=\"label\"\n        tabs={tabs}\n        theme={theme}\n      />\n      {tabs && (\n        <PageTabs\n          title={title}\n          slug={slug}\n          tabs={tabs}\n          currentTab={currentTab}\n        />\n      )}\n      <Main padded>\n        {children}\n        <EditLink relativePagePath={relativePagePath} />\n        <LastModifiedDate date={date} />\n      </Main>\n      <NextPrevious\n        pageContext={pageContext}\n        location={location}\n        slug={slug}\n        tabs={tabs}\n        currentTab={currentTab}\n      />\n      <Utils />\n    </Layout>\n  );\n};\n\nexport default Default;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bxTextTruncateEnd\":\"EditLink-module--bx--text-truncate--end--2pqje\",\"bxTextTruncateFront\":\"EditLink-module--bx--text-truncate--front--3_lIE\",\"link\":\"EditLink-module--link--1qzW3\",\"row\":\"EditLink-module--row--1B9Gk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bxTextTruncateEnd\":\"PageTabs-module--bx--text-truncate--end--267NA\",\"bxTextTruncateFront\":\"PageTabs-module--bx--text-truncate--front--3xEQF\",\"tabsContainer\":\"PageTabs-module--tabs-container--8N4k0\",\"list\":\"PageTabs-module--list--3eFQc\",\"listItem\":\"PageTabs-module--list-item--nUmtD\",\"link\":\"PageTabs-module--link--1mDJ1\",\"selectedItem\":\"PageTabs-module--selected-item--YPVr3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bxTextTruncateEnd\":\"last-modified-date-module--bx--text-truncate--end--123zi\",\"bxTextTruncateFront\":\"last-modified-date-module--bx--text-truncate--front--3xeKz\",\"text\":\"last-modified-date-module--text--24m-4\",\"row\":\"last-modified-date-module--row--2BquN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bxTextTruncateEnd\":\"PageHeader-module--bx--text-truncate--end--mZWeX\",\"bxTextTruncateFront\":\"PageHeader-module--bx--text-truncate--front--3zvrI\",\"pageHeader\":\"PageHeader-module--page-header--3hIan\",\"darkMode\":\"PageHeader-module--dark-mode--hBrwL\",\"withTabs\":\"PageHeader-module--with-tabs--3nKxA\",\"text\":\"PageHeader-module--text--o9LFq\"};","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/IBM/spm-kubernetes/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineNotification = makeShortcode(\"InlineNotification\");\nconst Tabs = makeShortcode(\"Tabs\");\nconst Tab = makeShortcode(\"Tab\");\nconst Row = makeShortcode(\"Row\");\nconst Column = makeShortcode(\"Column\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <InlineNotification mdxType=\"InlineNotification\">\nUniversal Base Image (UBI) consists of enterprise-ready and OCI-compliant Linux containers that offer greater security with stricter defaults than general images.\n      <p>{`For more information, see Red Hat’s `}<a parentName=\"p\" {...{\n          \"href\": \"https://www.redhat.com/en/blog/introducing-red-hat-universal-base-image\"\n        }}>{`Universal Base Image`}</a>{` and `}<a parentName=\"p\" {...{\n          \"href\": \"https://developers.redhat.com/blog/2019/07/29/red-hat-universal-base-image-how-it-works-in-3-minutes-or-less/\"\n        }}>{`Red Hat Universal base image how it works`}</a></p>\n    </InlineNotification>\n    <p>{`Some of the base images require `}<a parentName=\"p\" {...{\n        \"href\": \"https://access.redhat.com/terms-based-registry\"\n      }}>{`authentication`}</a>{` with the RedHat Container Registry.\nYou must be logged in to the following registries:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`registry.redhat.io`}</inlineCode>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`For accessing `}<inlineCode parentName=\"li\">{`registry.redhat.io/rhel8/httpd-24`}</inlineCode></li>\n          <li parentName=\"ul\">{`Login using `}<inlineCode parentName=\"li\">{`docker login registry.redhat.io`}</inlineCode></li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`registry.connect.redhat.com`}</inlineCode>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`For accessing `}<inlineCode parentName=\"li\">{`registry.connect.redhat.com/ibm/ibmjava8-sdk-ubi8-minimal`}</inlineCode></li>\n          <li parentName=\"ul\">{`Login using `}<inlineCode parentName=\"li\">{`docker login registry.connect.redhat.com`}</inlineCode></li>\n        </ul>\n      </li>\n    </ul>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p><strong parentName=\"p\">{`Note:`}</strong>{` As covered in `}<a parentName=\"p\" {...{\n          \"href\": \"/spm-kubernetes/build-images/base_images\"\n        }}>{`building Base images`}</a>{`, if you do not have an active RedHat subscription you will need to build your own base images from\nsource following the steps there.`}</p>\n      <p>{`Should you opt to build your own base images, the `}<inlineCode parentName=\"p\">{`BASE_REGISTRY`}</inlineCode>{` argument in the following commands may be omitted, if the base images are built in the same environment.`}</p>\n      <p>{`If the images are stored in a private registry, set `}<inlineCode parentName=\"p\">{`BASE_REGISTRY`}</inlineCode>{` to the registry’s hostname.`}</p>\n    </InlineNotification>\n    <p>{`Now that all the elements are in place, build the images as follows:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`We will use a `}<inlineCode parentName=\"p\">{`$DOCKER_REGISTRY`}</inlineCode>{` for the following commands. Please select based on the container environment you are deploying:`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`CRC will be `}<inlineCode parentName=\"li\">{`default-route-openshift-image-registry.apps-crc.testing`}</inlineCode>\n            <ul parentName=\"li\">\n              <li parentName=\"ul\">{`This URL can be retrieved using `}<inlineCode parentName=\"li\">{`oc registry info --public`}</inlineCode></li>\n            </ul>\n          </li>\n          <li parentName=\"ul\">{`Minikube will be `}<inlineCode parentName=\"li\">{`minikube.local:5000`}</inlineCode></li>\n          <li parentName=\"ul\">{`IKS will be `}<inlineCode parentName=\"li\">{`us.icr.io`}</inlineCode></li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`To build the XML server image, run the following commands:`}</p>\n      </li>\n    </ul>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p><strong parentName=\"p\">{`Note:`}</strong>{` In the following commands, the value of `}<inlineCode parentName=\"p\">{`$PROJECT`}</inlineCode>{` will change depending on deployment type:`}</p>\n      <ul>\n        <li parentName=\"ul\">{`For a Minikube deployment the value of `}<inlineCode parentName=\"li\">{`$PROJECT`}</inlineCode>{` is arbitrary.`}</li>\n        <li parentName=\"ul\">{`For an IKS deployment the value of `}<inlineCode parentName=\"li\">{`$PROJECT`}</inlineCode>{` must equate to a valid namespace in the customer’s account.`}</li>\n        <li parentName=\"ul\">{`For an OpenShift deployment the value of `}<inlineCode parentName=\"li\">{`$PROJECT`}</inlineCode>{` must equate to a valid project.\nFor this runbook it is best to stick with the value chosen for `}<inlineCode parentName=\"li\">{`$PROJECT`}</inlineCode>{` in `}<a parentName=\"li\" {...{\n            \"href\": \"/spm-kubernetes/prereq/openshift/codeready-containers#creating-a-crc-project\"\n          }}>{`Creating a CRC project`}</a></li>\n      </ul>\n    </InlineNotification>\n    <Tabs mdxType=\"Tabs\">\n      <Tab label=\"Using RedHat Registry\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-shell\"\n              }}>{`cd $SPM_HOME/dockerfiles/Liberty/\ndocker build \\\\\n     --tag $DOCKER_REGISTRY/$PROJECT/xmlserver:latest \\\\\n     --build-arg \"BASE_REGISTRY=registry.connect.redhat.com/\" \\\\\n     --file XMLServer.Dockerfile .\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n      <Tab label=\"Unauthenticated / Local image\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-shell\"\n              }}>{`cd $SPM_HOME/dockerfiles/Liberty/\ndocker build \\\\\n     --tag $DOCKER_REGISTRY/$PROJECT/xmlserver:latest \\\\\n     --file XMLServer.Dockerfile .\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n    </Tabs>\n    <ul>\n      <li parentName=\"ul\">{`To build the utilities image, run the following commands:`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`This image is used at various stages of the deployment to check the state of the deployment.`}</li>\n        </ul>\n      </li>\n    </ul>\n    <Tabs mdxType=\"Tabs\">\n      <Tab label=\"Using RedHat Registry\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-shell\"\n              }}>{`cd $SPM_HOME/dockerfiles/Liberty/\ndocker build \\\\\n     --tag $DOCKER_REGISTRY/$PROJECT/utilities:latest \\\\\n     --build-arg \"BASE_REGISTRY=registry.connect.redhat.com/\" \\\\\n     --file Utilities.Dockerfile .\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n      <Tab label=\"Unauthenticated / Local image\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-shell\"\n              }}>{`cd $SPM_HOME/dockerfiles/Liberty/\ndocker build \\\\\n     --tag $DOCKER_REGISTRY/$PROJECT/utilities:latest \\\\\n     --file Utilities.Dockerfile .\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n    </Tabs>\n    <ul>\n      <li parentName=\"ul\">{`To build the batch image, run the following commands:`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`A `}<inlineCode parentName=\"li\">{`.dockerignore`}</inlineCode>{` file is used to omit the EAR files from the build context for batch`}</li>\n        </ul>\n      </li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`cd $SPM_HOME/dockerfiles/Liberty/\necho -e 'content/release-stage/ear' > .dockerignore\ndocker build \\\\\n     --tag $DOCKER_REGISTRY/$PROJECT/batch:latest \\\\\n     --file Batch.Dockerfile .\nrm -f .dockerignore\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`To build the Server Code image, run the following commands:`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`cd $SPM_HOME/dockerfiles/Liberty/\ndocker build \\\\\n     --tag $DOCKER_REGISTRY/$PROJECT/servercode:latest \\\\\n     --file ServerEAR.Dockerfile \\\\\n     --build-arg \"MQ_RA_LICENSE=--acceptLicense\" .\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`To build the application image, run the following commands for each of the applications (EAR files) needed:`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Take note of the `}<inlineCode parentName=\"li\">{`SERVERCODE_IMAGE`}</inlineCode>{` build argument which references the server code image - this gives the images a common base`}</li>\n        </ul>\n      </li>\n    </ul>\n    <Tabs mdxType=\"Tabs\">\n      <Tab label=\"Curam EAR\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-shell\"\n              }}>{`cd $SPM_HOME/dockerfiles/Liberty/\ndocker build \\\\\n     --tag $DOCKER_REGISTRY/$PROJECT/curam:latest \\\\\n     --file ClientEAR.Dockerfile \\\\\n     --build-arg \"SERVERCODE_IMAGE=$DOCKER_REGISTRY/$PROJECT/servercode:latest\" \\\\\n     --build-arg \"EAR_NAME=Curam\" .\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n      <Tab label=\"Other EARs\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <p>{`For additional SPM applications (e.g. Rest, CitizenPortal), make the following changes to the command:`}</p>\n            <ul>\n              <li parentName=\"ul\">{`the value of the `}<inlineCode parentName=\"li\">{`--tag`}</inlineCode>{` argument must be the application name in `}<em parentName=\"li\">{`lowercase`}</em></li>\n              <li parentName=\"ul\">{`the value of the `}<inlineCode parentName=\"li\">{`--build-arg EAR_NAME`}</inlineCode>{` argument must be the name of the EAR file `}<em parentName=\"li\">{`without`}</em>{` the file extension (that is, for `}<inlineCode parentName=\"li\">{`Rest.ear`}</inlineCode>{`, use the value `}<inlineCode parentName=\"li\">{`Rest`}</inlineCode>{`)`}</li>\n            </ul>\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-shell\"\n              }}>{`docker build \\\\\n     --tag $DOCKER_REGISTRY/$PROJECT/rest:latest \\\\\n     --file ClientEAR.Dockerfile \\\\\n     --build-arg \"SERVERCODE_IMAGE=$DOCKER_REGISTRY/$PROJECT/servercode:latest\" \\\\\n     --build-arg \"EAR_NAME=Rest\" .\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n    </Tabs>\n    <ul>\n      <li parentName=\"ul\">{`To build the static content image, run the following commands:`}</li>\n    </ul>\n    <Tabs mdxType=\"Tabs\">\n      <Tab label=\"Using RedHat Registry\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-shell\"\n              }}>{`cd $SPM_HOME/dockerfiles/HTTPServer/\ndocker build \\\\\n     --tag $DOCKER_REGISTRY/$PROJECT/httpd:latest \\\\\n     --file StaticContent.Dockerfile \\\\\n     --build-arg \"BASE_REGISTRY=registry.redhat.io/\" \\\\\n     --build-arg \"CONTENT_DIR=/CuramStatic\" .\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n      <Tab label=\"Unauthenticated / Local image\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-shell\"\n              }}>{`cd $SPM_HOME/dockerfiles/HTTPServer/\ndocker build \\\\\n     --tag $DOCKER_REGISTRY/$PROJECT/httpd:latest \\\\\n     --file StaticContent.Dockerfile \\\\\n     --build-arg \"CONTENT_DIR=/CuramStatic\" .\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n    </Tabs>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p><strong parentName=\"p\">{`Note:`}</strong>{` The `}<inlineCode parentName=\"p\">{`CONTENT_DIR`}</inlineCode>{` build argument must correspond to the value set in `}<inlineCode parentName=\"p\">{`curam-config.xml`}</inlineCode>{` when the webclient was built.`}</p>\n    </InlineNotification>\n    <ul>\n      <li parentName=\"ul\">{`To build an SPM Docker image for your `}<em parentName=\"li\">{`built`}</em>{` Universal Access application:`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Copy the `}<inlineCode parentName=\"li\">{`build`}</inlineCode>{` directory from the React application to `}<inlineCode parentName=\"li\">{`$SPM_HOME/dockerfiles/HTTPServer`}</inlineCode></li>\n          <li parentName=\"ul\">{`Run the following commands:`}</li>\n        </ul>\n      </li>\n    </ul>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p>{`This is applicable only if you are licensed for `}<a parentName=\"p\" {...{\n          \"href\": \"https://www.ibm.com/support/knowledgecenter/SS8S5A_7.0.10/com.ibm.curam.universalaccess.doc/CitizenEngagement/ctr_CitizenEngagementApplication.html\"\n        }}>{`Universal Access`}</a></p>\n      <p><strong parentName=\"p\">{`Note:`}</strong>{` The `}<inlineCode parentName=\"p\">{`CONTENT_DIR`}</inlineCode>{` build argument must correspond to the value of the `}<inlineCode parentName=\"p\">{`PUBLIC_URL`}</inlineCode>{` variable set when creating the production build of the React app (`}<inlineCode parentName=\"p\">{`npm run build`}</inlineCode>{`).`}</p>\n    </InlineNotification>\n    <Tabs mdxType=\"Tabs\">\n      <Tab label=\"Using RedHat Registry\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-shell\"\n              }}>{`cd $SPM_HOME/dockerfiles/HTTPServer/\ndocker build \\\\\n     --tag $DOCKER_REGISTRY/$PROJECT/uawebapp:latest \\\\\n     --file UAWebApp.Dockerfile \\\\\n     --build-arg \"BASE_REGISTRY=registry.redhat.io/\" \\\\\n     --build-arg \"CONTENT_DIR=/universal\" .\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n      <Tab label=\"Unauthenticated / Local image\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-shell\"\n              }}>{`cd $SPM_HOME/dockerfiles/HTTPServer/\ndocker build \\\\\n     --tag $DOCKER_REGISTRY/$PROJECT/uawebapp:latest \\\\\n     --file UAWebApp.Dockerfile \\\\\n     --build-arg \"CONTENT_DIR=/universal\" .\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n    </Tabs>\n    <h2>{`Pushing the images to the registry`}</h2>\n    <p>{`When you set up Minikube by following the steps in `}<a parentName=\"p\" {...{\n        \"href\": \"/spm-kubernetes/prereq/kubernetes/minikube\"\n      }}>{`Minikube`}</a>{`, a registry was also created to store the Docker images.\nTo push the new images that you created to the registry, run the following shell script:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`docker push $DOCKER_REGISTRY/$PROJECT/xmlserver:latest\ndocker push $DOCKER_REGISTRY/$PROJECT/utilities:latest\ndocker push $DOCKER_REGISTRY/$PROJECT/batch:latest\ndocker push $DOCKER_REGISTRY/$PROJECT/servercode:latest\ndocker push $DOCKER_REGISTRY/$PROJECT/curam:latest\ndocker push $DOCKER_REGISTRY/$PROJECT/httpd:latest\n`}</code></pre>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p>{`If any additional images were built (for other SPM applications or for the React application), do not forget to push the images too. For example:`}</p>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-shell\"\n        }}>{`docker push $DOCKER_REGISTRY/$PROJECT/rest:latest\ndocker push $DOCKER_REGISTRY/$PROJECT/uawebapp:latest\n`}</code></pre>\n    </InlineNotification>\n    <h2>{`Pushing the images to the IBM Cloud Container Registry`}</h2>\n    <p>{`IBM Cloud Container Registry is the service to distribute the containers across Kubernetes clusters. In order to configure it, some preparation steps are\nrequired to obtain the credentials and a namespace, globally unique between all the tenants of IBM Cloud.\nRefer to `}<a parentName=\"p\" {...{\n        \"href\": \"https://cloud.ibm.com/docs/Registry?topic=Registry-getting-started\"\n      }}>{`Getting started with IBM Cloud Container Registry`}</a>{` for more information on configuring the registry and obtaining the required credentials.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`ibmcloud login -c <ICR_ENDPOINT> --apikey <ICR_API_KEY> -r <ICR_DC_REGION>\nibmcloud cr login\n\ndocker push us.icr.io/<ICR_NAMESPACE>/xmlserver:latest\ndocker push us.icr.io/<ICR_NAMESPACE>/utilities:latest\ndocker push us.icr.io/<ICR_NAMESPACE>/batch:latest\ndocker push us.icr.io/<ICR_NAMESPACE>/curam:latest\ndocker push us.icr.io/<ICR_NAMESPACE>/httpd:latest\n`}</code></pre>\n    <h2>{`View the artifacts in the repository`}</h2>\n    <p>{`Confirm that the pushes to the Docker registry succeeded. Run the following command:`}</p>\n    <Tabs mdxType=\"Tabs\">\n      <Tab label=\"Minikube\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-shell\"\n              }}>{`curl http://$DOCKER_REGISTRY/v2/_catalog\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n      <Tab label=\"CRC\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-shell\"\n              }}>{`curl -k -ukubeadmin:$(oc whoami -t) https://$(oc registry info --public)/v2/_catalog\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n    </Tabs>\n    <p>{`The command returns the following result:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\"repositories\":[\"batch\",\"curam\",\"xmlserver\",\"httpd\",\"utilities\"]}\n`}</code></pre>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p><strong parentName=\"p\">{`Note:`}</strong>{` Due to an issue with `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/kubernetes/minikube/issues/2365\"\n        }}>{`Minikube`}</a>{` you will need to repush the Docker images to the registry\neach time you shut down.`}</p>\n    </InlineNotification>\n    <p>{`For more information about the Docker Registry HTTP API, see `}<a parentName=\"p\" {...{\n        \"href\": \"https://docs.docker.com/registry/spec/api/\"\n      }}>{`Docker Registry HTTP API V2`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}