{{- include "sch.config.init" (list . "mqserver.sch.chart.config.values") -}}
{{ $apps := .Values.global.apps.config }}
{{- if not .Values.global.mq.multiInstance.operatorsEnabled }}
{{- range $name, $app := $apps }}
{{- if and ($app.enabled) (not (hasKey $app "mqConnectionNameList")) }}
{{- if (or ($.Values.global.mq.multiInstance.cephEnabled) ($.Values.global.mq.multiInstance.nfsEnabled)) }}
{{ $baseLogDir := (join "/" (list $.Values.global.mq.multiInstance.nfsFolder $name | compact)) }}
---
###############################################################################
# Copyright 2019,2021 IBM Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
###############################################################################

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "sch.names.fullCompName" (list $ $name) }}
  namespace: {{ $.Release.Namespace }}
  labels:
    {{- include "sch.metadata.labels.standard" (list $ $name) | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "sch.metadata.labels.standard" (list $ $name) | nindent 6 }}
  serviceName: {{ include "sch.names.fullCompName" (list $ $name) }}
  replicas: 2
  template:
    metadata:
      labels:
        {{- include "sch.metadata.labels.standard" (list $ $name) | nindent 8 }}
    spec:
      {{- if $.Values.global.imagePullSecret.username }}
      imagePullSecrets:
        - name: {{ $.Release.Name }}-pull-secret
      {{- end }}
      hostNetwork: false
      hostPID: false
      hostIPC: false
      {{- with $.Values.global.mq.security.context }}
      securityContext:
        {{- if .fsGroup }}
        fsGroup: {{ .fsGroup }}
        {{- end }}
        {{- if .supplementalGroups }}
        supplementalGroups:
          {{- range $group := .supplementalGroups }}
          - {{ $group -}}
          {{ end }}
        {{ end }}
      {{ end }}
      volumes:
        - name: {{ $.Release.Namespace }}-{{ $name }}-pvc-logs
          persistentVolumeClaim:
            claimName: {{ $.Release.Namespace }}-{{ $name }}-pvc-logs
        - name: {{ $.Release.Namespace }}-{{ $name }}-pvc-data
          persistentVolumeClaim:
            claimName: {{ $.Release.Namespace }}-{{ $name }}-pvc-data
        - name: {{ $.Release.Namespace }}-{{ $name }}-pvc-qm
          persistentVolumeClaim:
            claimName: {{ $.Release.Namespace }}-{{ $name }}-pvc-qm
        - name: mqsc-cmds
          configMap:
            name: {{ include "sch.names.fullCompName" (list $ "cm")  }}
        - name: service-certs
          secret:
            secretName: {{ $.Values.global.mq.tlsSecretName | default (printf "%s-mq-secret" $.Release.Name) }}
      {{- if and $.Values.global.mq.multiInstance.nfsEnabled $.Values.global.mq.security.initVolumeAsRoot }}
      initContainers:
        - name: init-pv
          image: ibmcom/mq:{{ $.Values.global.mq.version }}
          imagePullPolicy: {{ $.Values.global.pullPolicy }}
          terminationMessagePath: "/run/termination-log"
          {{- include "sch.security.securityContext" (list $ $.sch.chart.initContainerSecurityContext) | nindent 10 }}
          command:
            - /bin/sh
            - -c
          args:
            - >
              mkdir -pv -m 2775 /mnt/mqm/{{ $baseLogDir }} /mnt/mqm-log/{{ $baseLogDir }} /mnt/mqm-data/{{ $baseLogDir }};
              mkdir -pv -m 2775 /mnt/mqm-log/{{ $baseLogDir }}/logs /mnt/mqm-data/{{ $baseLogDir }}/data;
              chgrp -v {{ $.Values.global.mq.security.context.supplementalGroups | first | default 1001 }} /mnt/mqm/{{ $baseLogDir }} /mnt/mqm-log/{{ $baseLogDir }} /mnt/mqm-data/{{ $baseLogDir }};
              chgrp -v {{ $.Values.global.mq.security.context.supplementalGroups | first | default 1001 }} /mnt/mqm-log/{{ $baseLogDir }}/logs /mnt/mqm-data/{{ $baseLogDir }}/data;
          volumeMounts:
            - mountPath: /mnt/mqm
              name: {{ $.Release.Namespace }}-{{ $name }}-pvc-qm
            - mountPath: /mnt/mqm-log
              name: {{ $.Release.Namespace }}-{{ $name }}-pvc-logs
            - mountPath: /mnt/mqm-data
              name: {{ $.Release.Namespace }}-{{ $name }}-pvc-data
      {{- end }}
      containers:
        - name: {{ $.Chart.Name }}-{{ $name }}
          image: ibmcom/mq:{{ $.Values.global.mq.version }}
          imagePullPolicy: {{ $.Values.global.pullPolicy }}
          terminationMessagePath: "/run/termination-log"
          env:
            - name: LICENSE
              value: {{ $.Values.global.license }}
            - name: MQ_QMGR_NAME
              value: {{ $.Values.global.mq.queueManager.name }}
            - name: MQ_MULTI_INSTANCE
              {{- if ($.Values.global.mq.multiInstance.cephEnabled) }}
              value: "{{ $.Values.global.mq.multiInstance.cephEnabled | default false }}"
              {{- else if ($.Values.global.mq.multiInstance.nfsEnabled) }}
              value: "{{ $.Values.global.mq.multiInstance.nfsEnabled | default false }}"
              {{ end }}
            - name: LOG_FORMAT
              value: {{ $.Values.log.format | default "basic" }}
            - name: MQ_ENABLE_METRICS
              value: {{ $.Values.global.mq.metrics.enabled | default false | quote }}
            - name: DEBUG
              value: {{ $.Values.log.debug | default false | quote }}
            - name: MQ_EPHEMERAL_PREFIX
              value: /run/mqm
            - name: MQ_DEV
              value: "false"
            - name: MQ_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ default (printf "%s-mq-credentials" $.Release.Name) $.Values.global.mq.queueManager.secret.name }}
                  key: {{ $.Values.global.mq.queueManager.secret.adminPasswordKey }}
            - name: MQ_APP_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ default (printf "%s-mq-credentials" $.Release.Name) $.Values.global.mq.queueManager.secret.name }}
                  key: {{ $.Values.global.mq.queueManager.secret.appPasswordKey }}
            - name: TZ
              value: {{ $.Values.global.timezone }}
          ports:
            - containerPort: 1414
            - containerPort: 9443
            - containerPort: 9157
          volumeMounts:
            - mountPath: /mnt/mqm-log
              name: {{ $.Release.Namespace }}-{{ $name }}-pvc-logs
              {{- if $.Values.global.mq.multiInstance.nfsEnabled }}
              subPath: "{{ $baseLogDir }}/logs"
              {{- end }}
            - mountPath: /mnt/mqm-data
              name: {{ $.Release.Namespace }}-{{ $name }}-pvc-data
              {{- if $.Values.global.mq.multiInstance.nfsEnabled }}
              subPath: "{{ $baseLogDir }}/data"
              {{- end }}
            - mountPath: /mnt/mqm
              name: {{ $.Release.Namespace }}-{{ $name }}-pvc-qm
              {{- if $.Values.global.mq.multiInstance.nfsEnabled }}
              subPath: "{{ $baseLogDir }}"
              {{- end }}
            - name: mqsc-cmds
              mountPath: /etc/mqm/20-config.mqsc
              subPath: config.mqsc
            - name: mqsc-cmds
              mountPath: /etc/mqm/30-channel.mqsc
              subPath: channel_{{$name}}.mqsc
            - name: service-certs
              mountPath: /etc/mqm/pki/keys/ibmwebspheremq{{ $.Values.global.mq.queueManager.name | default "QM1" | lower }}
              readOnly: true
          {{- include "sch.security.securityContext" (list $ $.sch.chart.containerSecurityContext) | nindent 10 }}
          # Set liveness probe to determine if the queue manager is running
          livenessProbe:
            exec:
              command:
                - chkmqhealthy
            initialDelaySeconds: {{ $.Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ $.Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ $.Values.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ $.Values.livenessProbe.failureThreshold }}
          # Set readiness probe to determine if the MQ listener is running
          readinessProbe:
            exec:
              command:
                - chkmqready
            initialDelaySeconds: {{ $.Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ $.Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ $.Values.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ $.Values.readinessProbe.failureThreshold }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}
