(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{"013z":function(e,t,a){"use strict";var n=a("q1tI"),l=a.n(n),i=a("NmYn"),r=a.n(i),b=a("Wbzz"),o=a("Xrax"),c=a("k4MR"),s=a("TSYQ"),u=a.n(s),d=a("QH2O"),m=a.n(d),p=a("qKvR"),O=function(e){var t,a=e.title,n=e.theme,l=e.tabs,i=void 0===l?[]:l;return Object(p.b)("div",{className:u()(m.a.pageHeader,(t={},t[m.a.withTabs]=i.length,t[m.a.darkMode]="dark"===n,t))},Object(p.b)("div",{className:"bx--grid"},Object(p.b)("div",{className:"bx--row"},Object(p.b)("div",{className:"bx--col-lg-12"},Object(p.b)("h1",{id:"page-title",className:m.a.text},a)))))},g=a("BAC9"),h=function(e){var t=e.relativePagePath,a=e.repository,n=Object(b.useStaticQuery)("1364590287").site.siteMetadata.repository,l=a||n,i=l.baseUrl,r=l.subDirectory,o=i+"/edit/"+l.branch+r+"/src/pages"+t;return i?Object(p.b)("div",{className:"bx--row "+g.row},Object(p.b)("div",{className:"bx--col"},Object(p.b)("a",{className:g.link,href:o},"Edit this page on GitHub"))):null},j=a("FCXl"),T=a("dI71"),R=a("I8xM"),N=function(e){function t(){return e.apply(this,arguments)||this}return Object(T.a)(t,e),t.prototype.render=function(){var e=this.props,t=e.title,a=e.tabs,n=e.slug,l=n.split("/").filter(Boolean).slice(-1)[0],i=a.map((function(e){var t,a=r()(e,{lower:!0,strict:!0}),i=a===l,o=new RegExp(l+"/?(#.*)?$"),c=n.replace(o,a);return Object(p.b)("li",{key:e,className:u()((t={},t[R.selectedItem]=i,t),R.listItem)},Object(p.b)(b.Link,{className:R.link,to:""+c},e))}));return Object(p.b)("div",{className:R.tabsContainer},Object(p.b)("div",{className:"bx--grid"},Object(p.b)("div",{className:"bx--row"},Object(p.b)("div",{className:"bx--col-lg-12 bx--col-no-gutter"},Object(p.b)("nav",{"aria-label":t},Object(p.b)("ul",{className:R.list},i))))))},t}(l.a.Component),f=a("MjG9"),C=a("CzIb"),E=a("Asxa"),y=a("OIbQ"),x=a.n(y),k=function(e){var t=e.date,a=new Date(t);return t?Object(p.b)(E.c,{className:x.a.row},Object(p.b)(E.a,null,Object(p.b)("div",{className:x.a.text},"Page last updated: ",a.toLocaleDateString("en-GB",{day:"2-digit",year:"numeric",month:"long"})))):null};t.a=function(e){var t=e.pageContext,a=e.children,n=e.location,l=e.Title,i=t.frontmatter,s=void 0===i?{}:i,u=t.relativePagePath,d=t.titleType,m=s.tabs,g=s.title,T=s.theme,R=s.description,E=s.keywords,y=s.date,x=Object(C.a)().interiorTheme,w=Object(b.useStaticQuery)("2456312558").site.pathPrefix,I=w?n.pathname.replace(w,""):n.pathname,v=m?I.split("/").filter(Boolean).slice(-1)[0]||r()(m[0],{lower:!0}):"",P=T||x;return Object(p.b)(c.a,{tabs:m,homepage:!1,theme:P,pageTitle:g,pageDescription:R,pageKeywords:E,titleType:d},Object(p.b)(O,{title:l?Object(p.b)(l,null):g,label:"label",tabs:m,theme:P}),m&&Object(p.b)(N,{title:g,slug:I,tabs:m,currentTab:v}),Object(p.b)(f.a,{padded:!0},a,Object(p.b)(h,{relativePagePath:u}),Object(p.b)(k,{date:y})),Object(p.b)(j.a,{pageContext:t,location:n,slug:I,tabs:m,currentTab:v}),Object(p.b)(o.a,null))}},BAC9:function(e,t,a){e.exports={bxTextTruncateEnd:"EditLink-module--bx--text-truncate--end--2pqje",bxTextTruncateFront:"EditLink-module--bx--text-truncate--front--3_lIE",link:"EditLink-module--link--1qzW3",row:"EditLink-module--row--1B9Gk"}},I8xM:function(e,t,a){e.exports={bxTextTruncateEnd:"PageTabs-module--bx--text-truncate--end--267NA",bxTextTruncateFront:"PageTabs-module--bx--text-truncate--front--3xEQF",tabsContainer:"PageTabs-module--tabs-container--8N4k0",list:"PageTabs-module--list--3eFQc",listItem:"PageTabs-module--list-item--nUmtD",link:"PageTabs-module--link--1mDJ1",selectedItem:"PageTabs-module--selected-item--YPVr3"}},OIbQ:function(e,t,a){e.exports={bxTextTruncateEnd:"last-modified-date-module--bx--text-truncate--end--123zi",bxTextTruncateFront:"last-modified-date-module--bx--text-truncate--front--3xeKz",text:"last-modified-date-module--text--24m-4",row:"last-modified-date-module--row--2BquN"}},QH2O:function(e,t,a){e.exports={bxTextTruncateEnd:"PageHeader-module--bx--text-truncate--end--mZWeX",bxTextTruncateFront:"PageHeader-module--bx--text-truncate--front--3zvrI",pageHeader:"PageHeader-module--page-header--3hIan",darkMode:"PageHeader-module--dark-mode--hBrwL",withTabs:"PageHeader-module--with-tabs--3nKxA",text:"PageHeader-module--text--o9LFq"}},eyoR:function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return b})),a.d(t,"default",(function(){return g}));var n=a("wx14"),l=a("zLVn"),i=(a("q1tI"),a("7ljp")),r=a("013z"),b=(a("qKvR"),{}),o=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),Object(i.b)("div",t)}},c=o("InlineNotification"),s=o("Tabs"),u=o("Tab"),d=o("Row"),m=o("Column"),p={_frontmatter:b},O=r.a;function g(e){var t=e.components,a=Object(l.a)(e,["components"]);return Object(i.b)(O,Object(n.a)({},p,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)(c,{mdxType:"InlineNotification"},"Universal Base Image (UBI) consists of enterprise-ready and OCI-compliant Linux containers that offer greater security with stricter defaults than general images.",Object(i.b)("p",null,"For more information, see Red Hat’s ",Object(i.b)("a",{parentName:"p",href:"https://www.redhat.com/en/blog/introducing-red-hat-universal-base-image"},"Universal Base Image")," and ",Object(i.b)("a",{parentName:"p",href:"https://developers.redhat.com/blog/2019/07/29/red-hat-universal-base-image-how-it-works-in-3-minutes-or-less/"},"Red Hat Universal base image how it works"))),Object(i.b)("p",null,"Some of the base images require ",Object(i.b)("a",{parentName:"p",href:"https://access.redhat.com/terms-based-registry"},"authentication")," with the RedHat Container Registry.\nYou must be logged in to the following registries:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"registry.redhat.io"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"For accessing ",Object(i.b)("inlineCode",{parentName:"li"},"registry.redhat.io/rhel8/httpd-24")),Object(i.b)("li",{parentName:"ul"},"Login using ",Object(i.b)("inlineCode",{parentName:"li"},"docker login registry.redhat.io")))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"registry.connect.redhat.com"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"For accessing ",Object(i.b)("inlineCode",{parentName:"li"},"registry.connect.redhat.com/ibm/ibmjava8-sdk-ubi8-minimal")),Object(i.b)("li",{parentName:"ul"},"Login using ",Object(i.b)("inlineCode",{parentName:"li"},"docker login registry.connect.redhat.com"))))),Object(i.b)(c,{mdxType:"InlineNotification"},Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Note:")," As covered in ",Object(i.b)("a",{parentName:"p",href:"/spm-kubernetes/build-images/base_images"},"building Base images"),", if you do not have an active RedHat subscription you will need to build your own base images from\nsource following the steps there."),Object(i.b)("p",null,"Should you opt to build your own base images, the ",Object(i.b)("inlineCode",{parentName:"p"},"BASE_REGISTRY")," argument in the following commands may be omitted, if the base images are built in the same environment."),Object(i.b)("p",null,"If the images are stored in a private registry, set ",Object(i.b)("inlineCode",{parentName:"p"},"BASE_REGISTRY")," to the registry’s hostname.")),Object(i.b)("p",null,"Now that all the elements are in place, build the images as follows:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"We will use a ",Object(i.b)("inlineCode",{parentName:"p"},"$DOCKER_REGISTRY")," for the following commands. Please select based on the container environment you are deploying:"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"CRC will be ",Object(i.b)("inlineCode",{parentName:"li"},"default-route-openshift-image-registry.apps-crc.testing"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"This URL can be retrieved using ",Object(i.b)("inlineCode",{parentName:"li"},"oc registry info --public")))),Object(i.b)("li",{parentName:"ul"},"Minikube will be ",Object(i.b)("inlineCode",{parentName:"li"},"minikube.local:5000")),Object(i.b)("li",{parentName:"ul"},"IKS will be ",Object(i.b)("inlineCode",{parentName:"li"},"us.icr.io")))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"To build the XML server image, run the following commands:"))),Object(i.b)(c,{mdxType:"InlineNotification"},Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Note:")," In the following commands, the value of ",Object(i.b)("inlineCode",{parentName:"p"},"$PROJECT")," will change depending on deployment type:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"For a Minikube deployment the value of ",Object(i.b)("inlineCode",{parentName:"li"},"$PROJECT")," is arbitrary."),Object(i.b)("li",{parentName:"ul"},"For an IKS deployment the value of ",Object(i.b)("inlineCode",{parentName:"li"},"$PROJECT")," must equate to a valid namespace in the customer’s account."),Object(i.b)("li",{parentName:"ul"},"For an OpenShift deployment the value of ",Object(i.b)("inlineCode",{parentName:"li"},"$PROJECT")," must equate to a valid project.\nFor this runbook it is best to stick with the value chosen for ",Object(i.b)("inlineCode",{parentName:"li"},"$PROJECT")," in ",Object(i.b)("a",{parentName:"li",href:"/spm-kubernetes/prereq/openshift/codeready-containers#creating-a-crc-project"},"Creating a CRC project")))),Object(i.b)(s,{mdxType:"Tabs"},Object(i.b)(u,{label:"Using RedHat Registry",mdxType:"Tab"},Object(i.b)(d,{mdxType:"Row"},Object(i.b)(m,{mdxType:"Column"},Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-shell"},'cd $SPM_HOME/dockerfiles/Liberty/\ndocker build \\\n     --tag $DOCKER_REGISTRY/$PROJECT/xmlserver:latest \\\n     --build-arg "BASE_REGISTRY=registry.connect.redhat.com/" \\\n     --file XMLServer.Dockerfile .\n'))))),Object(i.b)(u,{label:"Unauthenticated / Local image",mdxType:"Tab"},Object(i.b)(d,{mdxType:"Row"},Object(i.b)(m,{mdxType:"Column"},Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-shell"},"cd $SPM_HOME/dockerfiles/Liberty/\ndocker build \\\n     --tag $DOCKER_REGISTRY/$PROJECT/xmlserver:latest \\\n     --file XMLServer.Dockerfile .\n")))))),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"To build the utilities image, run the following commands:",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"This image is used at various stages of the deployment to check the state of the deployment.")))),Object(i.b)(s,{mdxType:"Tabs"},Object(i.b)(u,{label:"Using RedHat Registry",mdxType:"Tab"},Object(i.b)(d,{mdxType:"Row"},Object(i.b)(m,{mdxType:"Column"},Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-shell"},'cd $SPM_HOME/dockerfiles/Liberty/\ndocker build \\\n     --tag $DOCKER_REGISTRY/$PROJECT/utilities:latest \\\n     --build-arg "BASE_REGISTRY=registry.connect.redhat.com/" \\\n     --file Utilities.Dockerfile .\n'))))),Object(i.b)(u,{label:"Unauthenticated / Local image",mdxType:"Tab"},Object(i.b)(d,{mdxType:"Row"},Object(i.b)(m,{mdxType:"Column"},Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-shell"},"cd $SPM_HOME/dockerfiles/Liberty/\ndocker build \\\n     --tag $DOCKER_REGISTRY/$PROJECT/utilities:latest \\\n     --file Utilities.Dockerfile .\n")))))),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"To build the batch image, run the following commands:",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"A ",Object(i.b)("inlineCode",{parentName:"li"},".dockerignore")," file is used to omit the EAR files from the build context for batch")))),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-shell"},"cd $SPM_HOME/dockerfiles/Liberty/\necho -e 'content/release-stage/ear' > .dockerignore\ndocker build \\\n     --tag $DOCKER_REGISTRY/$PROJECT/batch:latest \\\n     --file Batch.Dockerfile .\nrm -f .dockerignore\n")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"To build the Server Code image, run the following commands:")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-shell"},'cd $SPM_HOME/dockerfiles/Liberty/\ndocker build \\\n     --tag $DOCKER_REGISTRY/$PROJECT/servercode:latest \\\n     --file ServerEAR.Dockerfile \\\n     --build-arg "MQ_RA_LICENSE=--acceptLicense" .\n')),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"To build the application image, run the following commands for each of the applications (EAR files) needed:",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Take note of the ",Object(i.b)("inlineCode",{parentName:"li"},"SERVERCODE_IMAGE")," build argument which references the server code image - this gives the images a common base")))),Object(i.b)(s,{mdxType:"Tabs"},Object(i.b)(u,{label:"Curam EAR",mdxType:"Tab"},Object(i.b)(d,{mdxType:"Row"},Object(i.b)(m,{mdxType:"Column"},Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-shell"},'cd $SPM_HOME/dockerfiles/Liberty/\ndocker build \\\n     --tag $DOCKER_REGISTRY/$PROJECT/curam:latest \\\n     --file ClientEAR.Dockerfile \\\n     --build-arg "SERVERCODE_IMAGE=$DOCKER_REGISTRY/$PROJECT/servercode:latest" \\\n     --build-arg "EAR_NAME=Curam" .\n'))))),Object(i.b)(u,{label:"Other EARs",mdxType:"Tab"},Object(i.b)(d,{mdxType:"Row"},Object(i.b)(m,{mdxType:"Column"},Object(i.b)("p",null,"For additional SPM applications (e.g. Rest, CitizenPortal), make the following changes to the command:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"the value of the ",Object(i.b)("inlineCode",{parentName:"li"},"--tag")," argument must be the application name in ",Object(i.b)("em",{parentName:"li"},"lowercase")),Object(i.b)("li",{parentName:"ul"},"the value of the ",Object(i.b)("inlineCode",{parentName:"li"},"--build-arg EAR_NAME")," argument must be the name of the EAR file ",Object(i.b)("em",{parentName:"li"},"without")," the file extension (that is, for ",Object(i.b)("inlineCode",{parentName:"li"},"Rest.ear"),", use the value ",Object(i.b)("inlineCode",{parentName:"li"},"Rest"),")")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-shell"},'docker build \\\n     --tag $DOCKER_REGISTRY/$PROJECT/rest:latest \\\n     --file ClientEAR.Dockerfile \\\n     --build-arg "SERVERCODE_IMAGE=$DOCKER_REGISTRY/$PROJECT/servercode:latest" \\\n     --build-arg "EAR_NAME=Rest" .\n')))))),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"To build the static content image, run the following commands:")),Object(i.b)(s,{mdxType:"Tabs"},Object(i.b)(u,{label:"Using RedHat Registry",mdxType:"Tab"},Object(i.b)(d,{mdxType:"Row"},Object(i.b)(m,{mdxType:"Column"},Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-shell"},'cd $SPM_HOME/dockerfiles/HTTPServer/\ndocker build \\\n     --tag $DOCKER_REGISTRY/$PROJECT/httpd:latest \\\n     --file StaticContent.Dockerfile \\\n     --build-arg "BASE_REGISTRY=registry.redhat.io/" \\\n     --build-arg "CONTENT_DIR=/CuramStatic" .\n'))))),Object(i.b)(u,{label:"Unauthenticated / Local image",mdxType:"Tab"},Object(i.b)(d,{mdxType:"Row"},Object(i.b)(m,{mdxType:"Column"},Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-shell"},'cd $SPM_HOME/dockerfiles/HTTPServer/\ndocker build \\\n     --tag $DOCKER_REGISTRY/$PROJECT/httpd:latest \\\n     --file StaticContent.Dockerfile \\\n     --build-arg "CONTENT_DIR=/CuramStatic" .\n')))))),Object(i.b)(c,{mdxType:"InlineNotification"},Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Note:")," The ",Object(i.b)("inlineCode",{parentName:"p"},"CONTENT_DIR")," build argument must correspond to the value set in ",Object(i.b)("inlineCode",{parentName:"p"},"curam-config.xml")," when the webclient was built.")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"To build an SPM Docker image for your ",Object(i.b)("em",{parentName:"li"},"built")," Universal Access application:",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Copy the ",Object(i.b)("inlineCode",{parentName:"li"},"build")," directory from the React application to ",Object(i.b)("inlineCode",{parentName:"li"},"$SPM_HOME/dockerfiles/HTTPServer")),Object(i.b)("li",{parentName:"ul"},"Run the following commands:")))),Object(i.b)(c,{mdxType:"InlineNotification"},Object(i.b)("p",null,"This is applicable only if you are licensed for ",Object(i.b)("a",{parentName:"p",href:"https://www.ibm.com/support/knowledgecenter/SS8S5A_7.0.10/com.ibm.curam.universalaccess.doc/CitizenEngagement/ctr_CitizenEngagementApplication.html"},"Universal Access")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Note:")," The ",Object(i.b)("inlineCode",{parentName:"p"},"CONTENT_DIR")," build argument must correspond to the value of the ",Object(i.b)("inlineCode",{parentName:"p"},"PUBLIC_URL")," variable set when creating the production build of the React app (",Object(i.b)("inlineCode",{parentName:"p"},"npm run build"),").")),Object(i.b)(s,{mdxType:"Tabs"},Object(i.b)(u,{label:"Using RedHat Registry",mdxType:"Tab"},Object(i.b)(d,{mdxType:"Row"},Object(i.b)(m,{mdxType:"Column"},Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-shell"},'cd $SPM_HOME/dockerfiles/HTTPServer/\ndocker build \\\n     --tag $DOCKER_REGISTRY/$PROJECT/uawebapp:latest \\\n     --file UAWebApp.Dockerfile \\\n     --build-arg "BASE_REGISTRY=registry.redhat.io/" \\\n     --build-arg "CONTENT_DIR=/universal" .\n'))))),Object(i.b)(u,{label:"Unauthenticated / Local image",mdxType:"Tab"},Object(i.b)(d,{mdxType:"Row"},Object(i.b)(m,{mdxType:"Column"},Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-shell"},'cd $SPM_HOME/dockerfiles/HTTPServer/\ndocker build \\\n     --tag $DOCKER_REGISTRY/$PROJECT/uawebapp:latest \\\n     --file UAWebApp.Dockerfile \\\n     --build-arg "CONTENT_DIR=/universal" .\n')))))),Object(i.b)("h2",null,"Pushing the images to the registry"),Object(i.b)("p",null,"When you set up Minikube by following the steps in ",Object(i.b)("a",{parentName:"p",href:"/spm-kubernetes/prereq/kubernetes/minikube"},"Minikube"),", a registry was also created to store the Docker images.\nTo push the new images that you created to the registry, run the following shell script:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-shell"},"docker push $DOCKER_REGISTRY/$PROJECT/xmlserver:latest\ndocker push $DOCKER_REGISTRY/$PROJECT/utilities:latest\ndocker push $DOCKER_REGISTRY/$PROJECT/batch:latest\ndocker push $DOCKER_REGISTRY/$PROJECT/servercode:latest\ndocker push $DOCKER_REGISTRY/$PROJECT/curam:latest\ndocker push $DOCKER_REGISTRY/$PROJECT/httpd:latest\n")),Object(i.b)(c,{mdxType:"InlineNotification"},Object(i.b)("p",null,"If any additional images were built (for other SPM applications or for the React application), do not forget to push the images too. For example:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-shell"},"docker push $DOCKER_REGISTRY/$PROJECT/rest:latest\ndocker push $DOCKER_REGISTRY/$PROJECT/uawebapp:latest\n"))),Object(i.b)("h2",null,"Pushing the images to the IBM Cloud Container Registry"),Object(i.b)("p",null,"IBM Cloud Container Registry is the service to distribute the containers across Kubernetes clusters. In order to configure it, some preparation steps are\nrequired to obtain the credentials and a namespace, globally unique between all the tenants of IBM Cloud.\nRefer to ",Object(i.b)("a",{parentName:"p",href:"https://cloud.ibm.com/docs/Registry?topic=Registry-getting-started"},"Getting started with IBM Cloud Container Registry")," for more information on configuring the registry and obtaining the required credentials."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-shell"},"ibmcloud login -c <ICR_ENDPOINT> --apikey <ICR_API_KEY> -r <ICR_DC_REGION>\nibmcloud cr login\n\ndocker push us.icr.io/<ICR_NAMESPACE>/xmlserver:latest\ndocker push us.icr.io/<ICR_NAMESPACE>/utilities:latest\ndocker push us.icr.io/<ICR_NAMESPACE>/batch:latest\ndocker push us.icr.io/<ICR_NAMESPACE>/curam:latest\ndocker push us.icr.io/<ICR_NAMESPACE>/httpd:latest\n")),Object(i.b)("h2",null,"View the artifacts in the repository"),Object(i.b)("p",null,"Confirm that the pushes to the Docker registry succeeded. Run the following command:"),Object(i.b)(s,{mdxType:"Tabs"},Object(i.b)(u,{label:"Minikube",mdxType:"Tab"},Object(i.b)(d,{mdxType:"Row"},Object(i.b)(m,{mdxType:"Column"},Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-shell"},"curl http://$DOCKER_REGISTRY/v2/_catalog\n"))))),Object(i.b)(u,{label:"CRC",mdxType:"Tab"},Object(i.b)(d,{mdxType:"Row"},Object(i.b)(m,{mdxType:"Column"},Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-shell"},"curl -k -ukubeadmin:$(oc whoami -t) https://$(oc registry info --public)/v2/_catalog\n")))))),Object(i.b)("p",null,"The command returns the following result:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json"},'{"repositories":["batch","curam","xmlserver","httpd","utilities"]}\n')),Object(i.b)(c,{mdxType:"InlineNotification"},Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Note:")," Due to an issue with ",Object(i.b)("a",{parentName:"p",href:"https://github.com/kubernetes/minikube/issues/2365"},"Minikube")," you will need to repush the Docker images to the registry\neach time you shut down.")),Object(i.b)("p",null,"For more information about the Docker Registry HTTP API, see ",Object(i.b)("a",{parentName:"p",href:"https://docs.docker.com/registry/spec/api/"},"Docker Registry HTTP API V2"),"."))}g.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-build-images-build-images-mdx-9549dcf048ddc87d55ab.js.map